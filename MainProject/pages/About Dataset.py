import streamlit as st
from matplotlib import image
import pandas as pd
import plotly.express as px
import os
import numpy as np

# absolute path to this file
FILE_DIR = os.path.dirname(os.path.abspath("MainProject//pages//About Dataset.py"))

# absolute path to this file's root directory
PARENT_DIR = os.path.join(FILE_DIR, os.pardir)
# absolute path of directory_of_interest
dir_of_interest = os.path.join(PARENT_DIR, "resources")


st.header(":green[Problem Statement ]")
st.write("<div style='text-align: justify'>In today's fast-paced world, where people are increasingly conscious about their health and fitness.There is a growing demand for accessible and convenient solutions to help individuals achieve their fitness goals.However, with busy schedules and limited access to professional trainers, many individuals struggle to maintain a consistent fitness routine and make healthy lifestyle choices.</div>", unsafe_allow_html=True)
st.write("")
st.write("<div style='text-align: justify'>In today's digital era, where the importance of health and fitness is increasingly recognized, there is a growing need for innovative solutions that leverage technology to promote physical activity, healthy eating habits, and overall well-being.</div>", unsafe_allow_html=True)
st.write("")
st.write("<div style='text-align: justify'>Addressing this dynamic aspect of fitness oriented lifestyle, here we aim to develop a comprehensive and user-centric fitness app that empowers individuals to lead healthier lifestyles, achieve their fitness goals, and cultivate sustainable habits through personalized guidance, tracking tools, and community support.</div>", unsafe_allow_html=True)
st.write("-----------------------------------------------------------------------------------")   


st.header(":blue[About Dataset]")
st.write("<div style='text-align: justify'>This dataset generated by respondents to a distributed survey via Amazon Mechanical Turk between 03.12.2016  and  05.12.2016. Thirty eligible Fitbit users consented to the submission of personal tracker data, including minute-level output for physical activity, heart rate, and sleep monitoring.</div>", unsafe_allow_html=True) 
st.write('')
st.write(" ")
if st.button('**Data Description**'):
    st.header('Data Description')
    IMAGE_PATH2 = os.path.join(dir_of_interest, "images", "datasetdesc.png")
    img = image.imread(IMAGE_PATH2)
    st.image(img) 
else:
    pass
st.write("---------------------------------------------------------")
if st.button('**Target Variable**'):
    st.write( 'Here we predict the :blue[**Total Steps**] taken by user based on user inputs.')
else:
    pass

DATA_PATH = os.path.join(dir_of_interest, "data", "fitnesstracker_dataset.csv")
df = pd.read_csv(DATA_PATH, encoding="latin")
df = df.rename(columns={'Calories': 'CaloriesBurnt','TotalDistance':'TotalDistancekm'})
# Generate random values for age group
age_groups = ['18-24', '25-34', '35-44', '45-54', '55-64', '65+']
df['AgeGroup'] = np.random.choice(age_groups, size=len(df))

# Generate random values for gender
genders = ['Male', 'Female']
df['Gender'] = np.random.choice(genders, size=len(df))
df = df[['AgeGroup','Gender', 'WeightKg', 'Heightm', 'ActivityDayName',  'TotalMinutesAsleep',
       'SedentaryMinutes', 'TotalActiveMinutes','TotalDistancekm','CaloriesBurnt','TotalSteps' ]]

df1 = df.copy()


status = st.radio('**Select an option :**', ('Overview of dataset','Shape','Summary','Descriptive Statistics'))
st.write('-----------------------------------------------------------------------------------')


if (status == 'Overview of dataset'):    
    st.dataframe(df.head(8))

elif (status == 'Shape'):
    rows = df.count()[0]
    columns = df.shape[1] - 1
    st.text(f'Number of Rows  : {rows}')
    st.text(f' Number of Columns  : {columns}')
    
elif (status == 'Summary'):
    IMAGE_PATH3 = os.path.join(dir_of_interest, "images", "info.png")
    img = image.imread(IMAGE_PATH3)
    st.image(img)   
    
elif (status == 'Descriptive Statistics') :    
    x = df.describe(include = "object").T
    st.table(x)
    st.write("_______________________________________________")
    y = df.describe()
    st.table(y.T.round(2))
else:
    pass










